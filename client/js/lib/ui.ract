
<div id="top">
    <section id="map">
        <div id="map-canvas"></div>
    </section>

    <section id="input">

        <section id="destinations">
            <h1>Destinations</h1>
            {{#destinations:d}}
                <div>
                    <span class="id">{{d+1}}</span>
                    <span class="print-only"><b>{{name}}</b></span>
                    <label class="name"><input placeholder="Name..." value="{{name}}"></label>
                    <label class="address"><input placeholder="Address..." value="{{address}}" on-change="change-address:{{this}}"></label>
                    <label class="transit"><input type="checkbox" checked="{{.driving}}"><img class="icon" src="/img/car.svg"></label>
                    <label class="transit"><input type="checkbox" checked="{{.walking}}"><img class="icon" src="/img/walk.svg"></label>
                    <label class="transit"><input type="checkbox" checked="{{.biking}}"><img class="icon" src="/img/bike.svg"></label>
                    <label class="transit"><input type="checkbox" checked="{{.transiting}}"><img class="icon" src="/img/transit.svg"></label>
                </div>
            {{/destinations}}
            <p><button on-click="add-destination">Add Destination</button></p>
        </section>
        <section id="origins">
            <h1>Origins</h1>
            {{#origins:o}}
            <div class="origin">
                <span class="id">{{o+1}}</span>
                <span class="print-only"><b>{{address}}</b></span>
                <label class="name"><input placeholder="Name..." value="{{name}}"></label>
                <label class="address"><input placeholder="Address..." value="{{address}}" on-change="change-address:{{this}}"></label>
            </div>
            {{/origins}}
            <p><button on-click="add-origin">Add Origin</button></p>

        </section>
    </section>

</div>

<section id="routes">
    <h1>Travel Time</h1>
    <p>
        Show:
        <label><input type="checkbox" checked="{{showDriving}}"><img class="icon" src="/img/car.svg"> Driving</label>
        <label><input type="checkbox" checked="{{showWalking}}"><img class="icon" src="/img/walk.svg"> Walking</label>
        <label><input type="checkbox" checked="{{showBiking}}"><img class="icon" src="/img/bike.svg"> Biking</label>
        <label><input type="checkbox" checked="{{showTransit}}"><img class="icon" src="/img/transit.svg"> Transit</label>
    </p>

    {{#origins:o}}
    <table class="{{#showWalking}}show-walking{{/showWalking}} {{#showBiking}}show-biking{{/showBiking}} {{#showTransit}}show-transit{{/showTransit}} {{#showDriving}}show-driving{{/showDriving}}">
        <tr>
                <th>
                    {{#formatted_address}}
                    <a href="http://maps.google.com/maps?q={{formatted_address}}&layer=c&cbll={{latitude}},{{longitude}}" target="_blank">
                        <img src="http://maps.googleapis.com/maps/api/streetview?size=200x150&location={{formatted_address}}&sensor=false" width="100" height="75">
                    </a>
                    {{/formatted_address}}
                </th>
                <th colspan="4" class="origin">

                    <span class="id">{{id}}</span>
                    <span class="print-only"><b>{{address}}</b></span>
                    <label class="name"><input value="{{name}}" placeholder="Name..."></label><br>
                    <label class="address"><input value="{{address}}" placeholder="Address..." on-change="change-address:{{this}}"></label><br>
                    <button on-click="compute:{{this}}">Compute</button>
                    <a href="http://www.trulia.com/validate.php?hsb=1&tst=h&locationId=&topnav_extra=&q=&search={{address}}" target="_blank">Trulia</a>
                    <a href="http://maps.google.com/maps?q={{formatted_address}}" target="_blank">Google</a>
                    <a href="http://www.walkscore.com/score/{{formatted_address}}" target="_blank">Walk Score</a>

                </th>
        </tr>
        <tr>
                <th></th>
                <th>{{#showDriving}}<img class="icon" src="/img/car.svg">{{/showDriving}}</th>
                <th>{{#showWalking}}<img class="icon" src="/img/walk.svg">{{/showWalking}}</th>
                <th>{{#showBiking}}<img class="icon" src="/img/bike.svg">{{/showBiking}}</th>
                <th>{{#showTransit}}<img class="icon" src="/img/transit.svg">{{/showTransit}}</th>
        </tr>
        {{#destinations:d}}
            {{#formatted_address}}
            <tr>
                    <th>{{destinations[d].name}}</th>
                    <td class="{{#driving}}driving{{/driving}}">
                        {{#driving}}
                            <a href="{{directionsLink(origins[o],destinations[d],'drive')}}" target="_blank" class="drive route">
                                {{#distances[origins[o].formatted_address]}}{{#.drive}}<span class="{{timeClass(duration,2)}}" title="{{distance.text}}">{{shortenTime(duration.text)}}</span>{{/.drive}}{{^.drive}}...{{/.drive}}{{/distances[origins[o].formatted_address]}}
                            </a>
                        {{/driving}}
                    </td>
                    <td class="{{#walking}}walking{{/walking}}">
                        {{#walking}}
                            <a href="{{directionsLink(origins[o],destinations[d],'walk')}}" target="_blank" class="walk route">
                                {{#distances[origins[o].formatted_address]}}{{#.walk}}<span class="{{timeClass(duration,2)}}" title="{{distance.text}}">{{shortenTime(duration.text)}}</span>{{/.walk}}{{^.walk}}...{{/.walk}}{{/distances[origins[o].formatted_address]}}
                            </a>
                        {{/walking}}
                    </td>
                    <td class="{{#biking}}biking{{/biking}}">
                        {{#biking}}
                            <a href="{{directionsLink(origins[o],destinations[d],'bike')}}" target="_blank" class="bike route">
                                {{#distances[origins[o].formatted_address]}}{{#.bike}}<span class="{{timeClass(duration,1)}}" title="{{distance.text}}">{{shortenTime(duration.text)}}</span>{{/.bike}}{{^.bike}}...{{/.bike}}{{/distances[origins[o].formatted_address]}}
                            </a>
                        {{/biking}}
                    </td>
                    <td class="{{#transiting}}transiting{{/transiting}}">
                        {{#transiting}}
                            <a href="{{directionsLink(origins[o],destinations[d],'transit')}}" target="_blank" class="transit route">
                                {{#distances[origins[o].formatted_address]}}{{#.transit}}<span class="{{timeClass(duration,2)}}" title="{{distance.text}}">{{shortenTime(duration.text)}}</span>{{/.transit}}{{^.transit}}...{{/.transit}}{{/distances[origins[o].formatted_address]}}
                            </a>
                        {{/transiting}}
                    </td>
            </tr>
            {{/formatted_address}}
        {{/destinations}}
    </table>
    {{/origins}}
    <div>
        <button on-click="add-origin">Add Origin...</button>
    </div>
</section>


<script>

component.exports = {
    data: {
        timeClass: function(duration, factor) {
            if (duration.value < 5*60 * factor) {
                return 'fast';
            }
            if (duration.value < 10*60 * factor) {
                return 'moderate';
            }
            if (duration.value < 15*60 * factor) {
                return 'ok';
            }
            if (duration.value < 20*60 * factor) {
                return 'slow';
            }
            return 'bad';
        },
        shortenTime: function(time) {
            return time.replace(/ hours?/,"h").replace(/ mins?/, "m")
        },
        directionsLink: function(origin, destination, type) {
            return "https://maps.google.com/maps?t=m&saddr="+encodeURIComponent(origin.formatted_address)+
                    '&daddr='+encodeURIComponent(destination.formatted_address)+
                    '&dirflg='+({
                        walk:'w',
                        bike:'b',
                        transit:'r',
                        drive:'d'
                    }[type])
        }
    },
    init: function() {
        var self = this;
        this.on('add-destination', function () {
            var destinations = this.get("destinations");
            destinations.push({
                name:"",
                address:"",
                driving:true,
                walking:true,
                biking:true,
                transit:true
            });
            this.update();
        });
        this.on('add-origin', function () {
            var origins = this.get("origins");
            origins.push({
                name:"",
                address:""
            });
            this.update();
        });
        this.on('compute', function(context, origin) {
            var destinations = this.get("destinations");
            function update() {
                self.update()
            }
            compute(origin, destinations, 'walk', update);
            compute(origin, destinations, 'bike', update);
            compute(origin, destinations, 'drive', update);
            compute(origin, destinations, 'transit', update);
        });
        this.on('change-address', function(context, location) {
            if (location && location.address && location.address !== location.formatted_address) {
                console.log("Updating location:", location);
                window.geocoder.geocode({address: location.address}, function(results, status) {
                    if (status === google.maps.GeocoderStatus.OK) {
                        console.log("results", results);
                        var result = results[0];
                        location.address = location.formatted_address = result.formatted_address;
                        location.latitude = result.geometry.location.lat();
                        location.longitude = result.geometry.location.lng();
                        if (!location.name) {
                            location.name = location.address.replace(/^([\S]+\s+[\S]+).*$/, '$1')
                        }
                        self.update()
                    } else {
                        alert('Geocode was not successful for the following reason: ' + status);
                    }
                });
//                self.update()
            }
            if (location && !location.address) {
                delete location.latitude;
                delete location.longitude;
                delete location.formatted_address;
            }
        })
    }
};

function compute(origin, destinations, type, update) {
    if (type === 'transit') {
        // Distance matrix doesn't support transit trips
        return computeTransit(origin, destinations, update)
    }

    var targets = [];
    for (var i=0; i<destinations.length && targets.length<25; i++) {
        var dest = destinations[i];
        if (dest[{walk:'walking',bike:'biking',drive:'driving',transit:'transiting'}[type]] && dest.formatted_address) {
            if (!dest.distances) {
                dest.distances = {}
            }
            var d = dest.distances[origin.formatted_address];
            if (!d) {
                d = dest.distances[origin.formatted_address] = {};
            }
            if (!d[type]) {
                d.loading = d.loading ? d.loading+1 : 1;
                targets.push(dest);
            }
        }
    }
    if (targets.length) {
        update();
        var latlngs = targets.map(function(dest) {
            return new google.maps.LatLng(dest.latitude,dest.longitude)
        });
        console.log("distance matrix ["+type+']',latlngs);
        window.distanceMatrix.getDistanceMatrix({
            origins: [new google.maps.LatLng(origin.latitude, origin.longitude)],
            destinations: latlngs,
            travelMode: {
                    walk:google.maps.TravelMode.WALKING,
                    drive:google.maps.TravelMode.DRIVING,
                    bike:google.maps.TravelMode.BICYCLING,
                    transit:google.maps.TravelMode.TRANSIT
                }[type],
            unitSystem: google.maps.UnitSystem.IMPERIAL,
            durationInTraffic: false,
            avoidHighways: false,
            avoidTolls: false
        }, function(response, status) {
            if (status !== google.maps.DistanceMatrixStatus.OK) {
                alert('Error was: ' + status);
            } else {
                var origins = response.originAddresses;
                for (var i = 0; i < origins.length; i++) {
                    var results = response.rows[i].elements;
                    for (var j = 0; j < results.length; j++) {
                        var d = targets[j].distances[origin.formatted_address]
                        if (d.loading) {
                            d.loading--
                        }
                        d[type] = results[j];
                    }
                }
                update();
            }
        });
    }
}

function computeTransit(origin, destinations, update) {
    for (var i=0; i<destinations.length; i++) {
        var dest = destinations[i];
        if (!dest.transiting || !dest.formatted_address) {
            continue;
        }
        if (!dest.distances) {
            dest.distances = {};
        }
        var d = dest.distances[origin.formatted_address];
        if (!d) {
            d = dest.distances[origin.formatted_address] = {};
        }
        if (d.transit) {
            continue;
        }
        if (d.loading) {
            d.loading++
        } else {
            d.loading = 1
        }
        update();
        var request = {
            origin:new google.maps.LatLng(origin.latitude, origin.longitude),
            destination:new google.maps.LatLng(dest.latitude, dest.longitude),
            travelMode: google.maps.TravelMode.TRANSIT,
            transitOptions: {
                arrivalTime: new Date(2014, 2, 3, 9, 15, 0, 0)
            }
        };
        console.log("public transit from",origin.formatted_address,"to",dest.formatted_address, request)
        window.directionsService.route(request, function(response, status) {
            d.loading--;
            if (status !== google.maps.DistanceMatrixStatus.OK) {
                alert('Error was: ' + status + '\n\nClick Compute to try again');
            } else {
                d.transit = {
                    duration:response.routes[0].legs[0].duration,
                    distance:response.routes[0].legs[0].distance
                };
                console.log("transit = ", d.transit);

                setTimeout(function() {
                    computeTransit(origin, destinations, update);
                }, 5000);
            }
            update();
        });
        break;
    }
}
</script>